name: OpenWrt-IPK-Builder

on: 
  workflow_dispatch:
    inputs:
      Model:
        description: '选择设备（自动解析架构）'
        required: true
        default: 'Mini PC'
        type: choice
        options: ['General PC', 'Mini PC', 'Proxmox VE VM', 'VMware VM', 'Xiaomi 4A Gigabit Edition', 'Xiaomi R4A', 'Redmi AX6', 'Redmi AX6000', 'Xiaomi AX3600', 'Xiaomi AX9000', 'ASUS RT-ACRH17', 'ASUS RT-AC58U', 'ASUS RT-AX86U', 'ASUS RT-AX88U', 'Netgear R7800', 'Netgear XR500', 'Netgear WAX202', 'Linksys WRT1900ACS', 'Linksys WRT3200ACM', 'Linksys EA7500v2', 'GL.iNet MT1300', 'GL.iNet AX1800', 'Phicomm K3', 'Newifi D2', 'HiWiFi HC5962', 'Raspberry Pi 4B']
      Package:
        description: '输入包名 (例如: luci-app-adguardhome)'
        required: false
        type: string

env:
  TZ: Asia/Shanghai

jobs:
  matrix:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      arch: ${{ steps.parse-model.outputs.arch }}
      model_name: ${{ steps.parse-model.outputs.model_name }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 解析架构
        id: parse-model
        run: |
          MODEL_INPUT="${{ github.event.inputs.Model }}"
          
          if [ ! -f "scripts/Models" ]; then
            echo "::error::架构映射文件 scripts/Models 不存在"
            exit 1
          fi
          
          FOUND_ARCH=""
          while IFS= read -r line || [[ -n "$line" ]]; do
            line_clean=$(echo "$line" | sed -e 's/#.*//' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            [ -z "$line_clean" ] && continue
            
            IFS=':' read -ra parts <<< "$line_clean"
            if [ ${#parts[@]} -ne 2 ]; then
              continue
            fi
            
            devices=$(echo "${parts[0]}" | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            target_arch=$(echo "${parts[1]}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            
            while read -r device; do
              if [ "$device" == "$MODEL_INPUT" ]; then
                if [ -n "$FOUND_ARCH" ]; then
                  echo "::error::设备 '$MODEL_INPUT' 在多个架构中定义"
                  exit 1
                fi
                FOUND_ARCH="$target_arch"
              fi
            done <<< "$devices"
          done < scripts/Models
          
          if [ -z "$FOUND_ARCH" ]; then
            echo "::error::未找到设备 '$MODEL_INPUT' 对应的架构"
            exit 1
          fi
          
          sanitized_model=$(echo "$MODEL_INPUT" | tr ' ' '-')
          echo "arch=$FOUND_ARCH" >> $GITHUB_OUTPUT
          echo "model_name=$sanitized_model" >> $GITHUB_OUTPUT

      - name: 构建矩阵
        id: set-matrix
        env:
          TARGET_ARCH: ${{ steps.parse-model.outputs.arch }}
        run: |
          PACKAGE_INPUT="${{ github.event.inputs.Package }}"
          MAIN_REPO="https://github.com/somemoo/OpenWrt-packages"
          ALT_REPO="https://github.com/kiddin9/kwrt-packages"
          MAIN_BRANCH="lede"
          ALT_BRANCH="main"
          PKG_ARRAY=()
          USE_BUILD_FILE=false

          if [ -n "$PACKAGE_INPUT" ]; then
            IFS=',; ' read -ra PKG_ARRAY <<< "$PACKAGE_INPUT"
          elif [ -f "Build-IPK" ]; then
            declare -a tmp_pkgs
            while IFS= read -r line; do
              [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "${line// }" ]] && continue
              IFS=',; ' read -ra pkgs <<< "$line"
              for pkg in "${pkgs[@]}"; do
                clean_pkg=$(echo "$pkg" | xargs)
                [ -n "$clean_pkg" ] && tmp_pkgs+=("$clean_pkg")
              done
            done < Build-IPK
            [ ${#tmp_pkgs[@]} -gt 0 ] && PKG_ARRAY=("${tmp_pkgs[@]}") && USE_BUILD_FILE=true
          fi

          git clone -b $MAIN_BRANCH --depth=1 $MAIN_REPO OpenWrt-packages
          git clone -b $ALT_BRANCH --depth=1 $ALT_REPO OpenWrt-packages-alt

          declare -a valid_pkgs repo_urls branches
          for pkg in "${PKG_ARRAY[@]}"; do
            if [ -d "OpenWrt-packages/$pkg" ]; then
              valid_pkgs+=("$pkg")
              repo_urls+=("$MAIN_REPO")
              branches+=("$MAIN_BRANCH")
            elif [ -d "OpenWrt-packages-alt/$pkg" ]; then
              valid_pkgs+=("$pkg")
              repo_urls+=("$ALT_REPO")
              branches+=("$ALT_BRANCH")
            else
              echo "::warning::跳过不存在的包: $pkg"
            fi
          done

          [ ${#valid_pkgs[@]} -eq 0 ] && echo "::error::没有有效的包可构建" && exit 1

          matrix_json=$(jq -c -n \
            --argjson pkgs "$(printf '%s\n' "${valid_pkgs[@]}" | jq -R . | jq -s .)" \
            --argjson urls "$(printf '%s\n' "${repo_urls[@]}" | jq -R . | jq -s .)" \
            --argjson brchs "$(printf '%s\n' "${branches[@]}" | jq -R . | jq -s .)" \
            --arg arch "$TARGET_ARCH" \
            '[$arch as $a | range(0; ($pkgs|length)) as $i | {target: $pkgs[$i], repo_url: $urls[$i], branch: $brchs[$i], arch: $a}]')

          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  build:
    name: 构建 ${{ matrix.target }} (${{ env.model_name }})
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix) }}
      fail-fast: false
    env:
      arch_path: ${{ needs.matrix.outputs.arch }}
      model_name: ${{ needs.matrix.outputs.model_name }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 加载环境
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq --no-install-recommends \
            aria2 build-essential clang llvm flex g++ gawk gcc-multilib gettext \
            git libncurses5-dev libssl-dev python3 python3-pyelftools python3-setuptools \
            rsync unzip zstd zlib1g-dev jq subversion qemu-utils ccache \
            libelf-dev device-tree-compiler libgmp3-dev libmpc-dev  
          git clone --depth=1 https://github.com/openwrt-dev/po2lmo
          (cd po2lmo && sudo make && sudo make install)

      - name: 准备SDK
        run: |
          SDK_URL1="https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/${{ env.arch_path }}/immortalwrt-sdk-24.10-SNAPSHOT-$(echo ${{ env.arch_path }} | tr '/' '-')_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          SDK_URL2="https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/${{ env.arch_path }}/immortalwrt-sdk-24.10-SNAPSHOT-$(echo ${{ env.arch_path }} | tr '/' '-')_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
          wget --spider -q "$SDK_URL1" && wget "$SDK_URL1" || wget "$SDK_URL2"
          mkdir OpenWrt-$(echo ${{ env.arch_path }} | tr '/' '-') && tar -I 'zstd -d' -xf immortalwrt-*.tar.zst -C OpenWrt-$(echo ${{ env.arch_path }} | tr '/' '-') --strip-components 1 && rm immortalwrt-*.tar.zst

      - name: 克隆项目
        run: |
          cd OpenWrt-$(echo ${{ env.arch_path }} | tr '/' '-')
          cp -rf ../App/. .

          REPO_URL="${{ matrix.repo_url }}"
          BRANCH="${{ matrix.branch }}"
          git clone -b "$BRANCH" --depth=1 "$REPO_URL" packages
          mv packages/* package/
          rm -rf packages

          ./scripts/feeds update -a
          rm -rf feeds/luci/{applications,collections,protocols,themes,libs,docs,contrib}
          rm -rf feeds/luci/modules/!(luci-base)
          rm -rf feeds/packages/!(lang|libs|devel|utils|net|multimedia)
          rm -rf feeds/packages/multimedia/!(gstreamer1|ffmpeg)
          rm -rf feeds/packages/net/!(mosquitto|curl)
          rm -rf feeds/base/package/firmware
          rm -rf feeds/base/package/network/!(services|utils)
          rm -rf feeds/base/package/network/services/!(ppp)
          rm -rf feeds/base/package/system/!(opkg|ubus|uci|ca-certificates)
          rm -rf feeds/base/package/kernel/!(cryptodev-linux)
          sed -i '/	refresh_config();/d' scripts/feeds
          
          ./scripts/feeds install ${{ matrix.target }}
          echo "CONFIG_PACKAGE_${{ matrix.target }}=y" >> .config

      - name: 下载依赖
        id: package
        run: |
          cd OpenWrt-$(echo ${{ env.arch_path }} | tr '/' '-')
          mv -f feeds/base feeds/base.bak
          mv -f feeds/packages feeds/packages.bak
          make defconfig
          mv -f feeds/packages.bak feeds/packages
          mv -f feeds/base.bak feeds/base
      
      - name: 开始编译
        run: |
          cd OpenWrt-$(echo ${{ env.arch_path }} | tr '/' '-')
          make package/${{ matrix.target }}/compile -j$(nproc) V=s

      - name: 准备 ipk
        run: |
          cd OpenWrt-$(echo ${{ env.arch_path }} | tr '/' '-')
          mkdir -p ./artifact/IPK
          find ./bin/packages/*/*/ -maxdepth 1 -type f -name "*.ipk" | xargs -i mv -f {} ./artifact/IPK/
          cd ./artifact/IPK
          echo "IPK=$PWD" >> $GITHUB_ENV    
      
      - name: 上传 ipk
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.model_name }}-$(echo ${{ env.arch_path }} | tr '/' '-')-${{ matrix.target }}
          path: ${{ env.IPK }}
