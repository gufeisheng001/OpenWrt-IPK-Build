name: OpenWrt-IPK-Builder

on: 
  workflow_dispatch:
    inputs:
      Model:
        description: '选择设备（自动解析架构）'
        required: true
        default: '迷你主机'
        type: choice
        options: ['迷你主机', '普通PC', 'Proxmox VE虚拟机', 'VMware虚拟机', '小米路由器4A千兆版', 'Xiaomi R4A', 'Redmi AX6', 'Redmi AX6000', '小米AX3600', 'Xiaomi AX9000', 'ASUS RT-ACRH17', 'ASUS RT-AC58U', 'ASUS RT-AX86U', 'ASUS RT-AX88U', 'Netgear R7800', 'Netgear XR500', 'Netgear WAX202', 'Linksys WRT1900ACS', 'Linksys WRT3200ACM', 'Linksys EA7500v2', 'GL.iNet MT1300', 'GL.iNet AX1800', '斐讯K3', 'Newifi D2', '极路由4 HC5962', 'Raspberry Pi 4B']
      Package:
        description: '输入包名 (例如: luci-app-adguardhome)'
        required: false
        type: string

env:
  TZ: Asia/Shanghai

jobs:
  matrix:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      repo_url: ${{ steps.set-matrix.outputs.repo_url }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 解析设备架构
        id: parse-model
        run: |
          MODEL_INPUT="${{ github.event.inputs.Model }}"
          echo "选中的设备: $MODEL_INPUT"
          
          # 读取 Models 文件
          if [ ! -f "scripts/Models" ]; then
            echo "::error::架构映射文件 scripts/Models 不存在"
            exit 1
          fi
          
          FOUND_ARCH=""
          while IFS= read -r line || [[ -n "$line" ]]; do
            # 清理行并跳过注释和空行
            line_clean=$(echo "$line" | sed -e 's/#.*//' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            [ -z "$line_clean" ] && continue
            
            # 分割设备和架构部分
            IFS=':' read -ra parts <<< "$line_clean"
            if [ ${#parts[@]} -ne 2 ]; then
              echo "::warning::无效行格式: $line"
              continue
            fi
            
            devices=$(echo "${parts}" | tr ',' '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            target_arch=$(echo "${parts}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            
            # 检查设备匹配
            while read -r device; do
              if [ "$device" == "$MODEL_INPUT" ]; then
                if [ -n "$FOUND_ARCH" ]; then
                  echo "::error::设备 '$MODEL_INPUT' 在多个架构中定义"
                  exit 1
                fi
                FOUND_ARCH="$target_arch"
                echo "匹配成功: $device → $target_arch"
              fi
            done <<< "$devices"
          done < scripts/Models
          
          if [ -z "$FOUND_ARCH" ]; then
            echo "::error::未找到设备 '$MODEL_INPUT' 对应的架构"
            echo "请检查以下内容："
            echo "1. scripts/Models 文件格式是否正确"
            echo "2. 设备名称是否严格匹配"
            exit 1
          fi
          
          echo "解析出的架构: $FOUND_ARCH"
          echo "arch=$FOUND_ARCH" >> $GITHUB_OUTPUT

      - name: 构建包矩阵
        id: set-matrix
        env:
          TARGET_ARCH: ${{ steps.parse-model.outputs.arch }}
        run: |
          PACKAGE_INPUT="${{ github.event.inputs.Package }}"
          REPO_URL="https://github.com/somemoo/OpenWrt-packages"
          BRANCH="lede"
          PKG_ARRAY=()
          USE_BUILD_FILE=false

          # 优先处理用户输入
          if [ -n "$PACKAGE_INPUT" ]; then
            echo "检测到用户输入包，忽略 Build-IPK 文件"
            IFS=',; ' read -ra PKG_ARRAY <<< "$PACKAGE_INPUT"
            USE_BUILD_FILE=false
          elif [ -f "Build-IPK" ]; then
            echo "检测到 Build-IPK 文件存在"
            declare -a tmp_pkgs
            while IFS= read -r line; do
              if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "${line// }" ]]; then
                continue
              fi
              IFS=',; ' read -ra pkgs <<< "$line"
              for pkg in "${pkgs[@]}"; do
                clean_pkg=$(echo "$pkg" | xargs)
                [ -n "$clean_pkg" ] && tmp_pkgs+=("$clean_pkg")
              done
            done < Build-IPK
            if [ ${#tmp_pkgs[@]} -gt 0 ]; then
              echo "文件内容有效，包含 ${#tmp_pkgs[@]} 个包"
              if git diff --quiet HEAD^ HEAD -- "Build-IPK" 2>/dev/null; then
                echo "文件未修改，回退到默认包"
              else
                echo "文件已修改，使用文件内容构建"
                PKG_ARRAY=("${tmp_pkgs[@]}")
                USE_BUILD_FILE=true
              fi
            else
              echo "::warning::文件内容无效，回退到默认包"
            fi
          fi

          git clone -b $BRANCH --single-branch $REPO_URL OpenWrt-packages
          cd OpenWrt-packages
          if [ "$USE_BUILD_FILE" = false ]; then
            if [ ${#PKG_ARRAY[@]} -eq 0 ]; then
              echo "使用默认包搜索策略"
              PKG_ARRAY=($(find . -maxdepth 1 -type d -name 'luci-app-*' -printf '%f\n'))
              if [ ${#PKG_ARRAY[@]} -eq 0 ]; then
                echo "::warning::主仓库未找到默认包，尝试备用仓库..."
                cd ..
                rm -rf OpenWrt-packages
                REPO_URL="https://github.com/kiddin9/kwrt-packages"
                BRANCH="main"
                git clone -b $BRANCH --single-branch $REPO_URL OpenWrt-packages
                cd OpenWrt-packages
                PKG_ARRAY=($(find . -maxdepth 1 -type d -name 'luci-app-*' -printf '%f\n'))
              fi
            fi
          fi
          if [ ${#PKG_ARRAY[@]} -gt 0 ]; then
            all_exist=true
            for pkg in "${PKG_ARRAY[@]}"; do
              if [ ! -d "$pkg" ]; then
                echo "::warning::包 '$pkg' 在主仓库不存在，尝试备用仓库..."
                all_exist=false
                break
              fi
            done
            if [ "$all_exist" = false ]; then
              cd ..
              rm -rf OpenWrt-packages
              REPO_URL="https://github.com/kiddin9/kwrt-packages"
              BRANCH="main"
              git clone -b $BRANCH --single-branch $REPO_URL OpenWrt-packages
              cd OpenWrt-packages
              for pkg in "${PKG_ARRAY[@]}"; do
                if [ ! -d "$pkg" ]; then
                  echo "::error::包 '$pkg' 在备用仓库也不存在"
                  exit 1
                fi
              done
            fi
          else
            echo "::error::未找到任何有效包"
            exit 1
          fi
          targets_json=$(jq -c -n \
            --argjson arr "$(printf '%s\n' "${PKG_ARRAY[@]}" | jq -R . | jq -s .)" \
            --arg arch "$TARGET_ARCH" \
            '[$arch as $a | $arr[] | {target: ., arch: $a}]')
          
          cd ..
          rm -rf OpenWrt-packages
          echo "matrix=$targets_json" >> $GITHUB_OUTPUT
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT

  build:
    name: 构建 ${{ matrix.target }} (${{ matrix.arch }})
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix) }}
      fail-fast: false
    env:
      REPO_URL: ${{ needs.matrix.outputs.repo_url }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 加载环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq --no-install-recommends \
            aria2 build-essential clang llvm flex g++ gawk gcc-multilib gettext \
            git libncurses5-dev libssl-dev python3 python3-pyelftools python3-setuptools \
            rsync unzip zstd zlib1g-dev jq subversion qemu-utils ccache \
            libelf-dev device-tree-compiler libgmp3-dev libmpc-dev  
          sudo apt-get autoremove --purge -qq
          sudo rm -rf /var/lib/apt/lists/*
          sudo timedatectl set-timezone "Asia/Shanghai"
          git clone --depth=1 https://github.com/openwrt-dev/po2lmo
          (cd po2lmo && sudo make && sudo make install)

      - name: 设置变量
        id: ENV
        run: |
          echo "date=$(date +'%m.%d')" >> $GITHUB_ENV
          echo "arch_path=$(echo ${{ matrix.arch }} | tr '/' '-')" >> $GITHUB_ENV

      - name: 准备SDK
        run: |
          SDK_URL1="https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/${{ matrix.arch }}/immortalwrt-sdk-24.10-SNAPSHOT-${{ env.arch_path }}_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          SDK_URL2="https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/${{ matrix.arch }}/immortalwrt-sdk-24.10-SNAPSHOT-${{ env.arch_path }}_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
          wget --spider -q "$SDK_URL1" && wget "$SDK_URL1" || wget "$SDK_URL2"
          mkdir OpenWrt-${{ env.arch_path }} && tar -I 'zstd -d' -xf immortalwrt-*.tar.zst -C OpenWrt-${{ env.arch_path }} --strip-components 1 && rm immortalwrt-*.tar.zst

      - name: 克隆项目
        run: |
          shopt -s extglob
          cp -rf App/. OpenWrt-${{ env.arch_path }}/
          cd OpenWrt-${{ env.arch_path }}
          ./scripts/feeds update -a
          rm -Rf feeds/luci/{applications,collections,protocols,themes,libs,docs,contrib}
          rm -Rf feeds/luci/modules/!(luci-base)
          rm -Rf feeds/packages/!(lang|libs|devel|utils|net|multimedia)
          rm -Rf feeds/packages/multimedia/!(gstreamer1|ffmpeg)
          rm -Rf feeds/packages/net/!(mosquitto|curl)
          rm -Rf feeds/base/package/firmware
          rm -Rf feeds/base/package/network/!(services|utils)
          rm -Rf feeds/base/package/network/services/!(ppp)
          rm -Rf feeds/base/package/system/!(opkg|ubus|uci|ca-certificates)
          rm -Rf feeds/base/package/kernel/!(cryptodev-linux)
          sed -i '/	refresh_config();/d' scripts/feeds
          
          if [[ "$REPO_URL" == *"kiddin9"* ]]; then
            git clone -b main $REPO_URL packages
            mv packages/* package/
            rm -rf {packages,.github,.gitignore,LICENSE,README.md}
          else
            git clone -b lede $REPO_URL packages 
            mv packages/* package/
            rm -rf {packages,package/golang}
          fi
          
          ./scripts/feeds update -a
          ./scripts/feeds install ${{ matrix.target }}
          
          if [ -f "package/${{ matrix.target }}/Makefile" ]; then
            echo "CONFIG_PACKAGE_${{ matrix.target }}=y" >> .config
          else
            echo "::error::包 ${{ matrix.target }} 最终不存在于仓库中"
            exit 1
          fi

      - name: 下载依赖
        id: package
        run: |
          cd OpenWrt-${{ env.arch_path }}
          mv -f feeds/base feeds/base.bak
          mv -f feeds/packages feeds/packages.bak
          make defconfig
          mv -f feeds/packages.bak feeds/packages
          mv -f feeds/base.bak feeds/base

      - name: 开始编译
        run: |
          cd OpenWrt-${{ env.arch_path }}
          make package/${{ matrix.target }}/compile -j$(nproc) V=s

      - name: 准备 ipk
        run: |
          cd OpenWrt-${{ env.arch_path }}
          mkdir -p ./artifact/IPK
          find ./bin/packages/*/*/ -maxdepth 1 -type f -name "*.ipk" | xargs -i mv -f {} ./artifact/IPK/
          cd ./artifact/IPK
          echo "IPK=$PWD" >> $GITHUB_ENV

      - name: 上传 ipk
        uses: actions/upload-artifact@v4
        id: upipk
        with:
          name: ${{ env.date }} (${{ env.arch_path }})-${{ matrix.target }}
          path: ${{ env.IPK }}
